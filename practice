def deletion_cost(str1, str2):
    cost = i = j = 0
    while i < len(str1) and j < len(str2):
        if str1[i] == str2[j]:
            # If characters match, move both pointers
            i += 1
            j += 1
        else:
            i += 1
            cost += 1  # Increment cost for deletion
    cost += (len(str1) - i)  # Remaining characters in str1 are deleted
    return cost

def substitution_cost(str1, str2):
    cost = i = j = 0
    while i < len(str1) and j < len(str2):
        if str1[i] == str2[j]:
            # If characters match, move both pointers
            i += 1
            j += 1
        else:
            i += 1
            j += 1
            cost += 1  # Increment cost for substitution
    cost += (len(str1) - i)  # Remaining characters in str1 are substitutions
    cost += (len(str2) - j)  # Remaining characters in str2 are substitutions
    return cost

def insertion_cost(str1, str2):
    cost = i = j = 0
    while i < len(str1) and j < len(str2):
        if str1[i] == str2[j]:
            # If characters match, move both pointers
            i += 1
            j += 1
        else:
            j += 1
            cost += 1  # Increment cost for insertion
    cost += (len(str2) - j)  # Remaining characters in str2 are inserted
    return cost

def edit_distance_brute_force(str1, str2):   
    if len(str2) > len(str1):
        str1, str2 = str2, str1

    deletion_cost_result = deletion_cost(str1, str2)
    insertion_cost_result = insertion_cost(str1, str2)
    substitution_cost_result = substitution_cost(str1, str2)

    # Debugging output
    print('Deletion cost:', deletion_cost_result)
    print('Insertion cost:', insertion_cost_result)
    print('Substitution cost:', substitution_cost_result)

    # Take the minimum of the costs
    cost = min(deletion_cost_result, insertion_cost_result, substitution_cost_result)

    return cost

# Example usage:
str1 = "singhabhisheksingh"
str2 = "abhishek"
print(edit_distance_brute_force(str1, str2))  # Output: the minimum edit distance
