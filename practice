from collections import defaultdict

def find_subarray_with_k_different_integers(arr, k):
    left = 0
    n = len(arr)
   
    
    my_dict = defaultdict(int)  # Dictionary to count occurrences of each integer
    result = []
    
    for right in range(n):
        # Add the current element to the dictionary
        my_dict[arr[right]] += 1
        
        
        # If we have exactly k different integers, record the subarray
        while len(my_dict) >= k:
            if len(my_dict) == k:
                result.append(arr[left:right + 1])
                            
            # Move left pointer to find other subarrays
            my_dict[arr[left]] -= 1
            if my_dict[arr[left]] == 0:
                del my_dict[arr[left]]
            left += 1
        
    return result

# Example usage
arr = [1, 2, 1, 2, 3,4]
k = 3
subarrays = find_subarray_with_k_different_integers(arr, k)
print(subarrays)  # Output should be all subarrays with exactly 3 different integers
#good, to pick the shortest length of list from list of lists, min(subarrays, key=len)