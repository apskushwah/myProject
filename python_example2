
def combinationSum(arr, sum):
    ans = []
    temp = []
    
    # first do hashing nothing but set{}
    # since set does not always sort
    # removing the duplicates using Set and
    # Sorting the List
    arr = sorted(list(set(arr)))
    print (f"before calling findNumbers in combinations: ans:{ans} , arr:{arr} , temp:{temp} , sum:{sum}" )
    #print (f'Calling the function:findNumbers {count}th time from combinationSum')
    input()
    findNumbers(ans, arr, temp, sum, 0)
    print (f"inside combinations: {ans}")
    input()
    return ans
 
def findNumbers(ans, arr, temp, sum, index):     
    global count
    print (f'Calling the function:findNumbers {count} th time')
    count += 1
    if(sum == 0):         
        # Adding deep copy of list to ans
        ans.append(list(temp))
        print (f"inside findNumbers in IF: {ans} ; index:{index}")
        input()
        return
       
    # Iterate from index to len(arr) -     
    for i in range(index, len(arr)):
        print (f"before IF, calling findNumbers in FOR:{sum} ; {arr[i]} ; index:{index} ; i:{i} ")
        input()
        # checking that sum does not become negative
        if(sum - arr[i]) >= 0:
            print (f"insdie IF calling findNumbers in FOR:{sum} ; {arr[i]} ; index:{index} ; i:{i} ")
            input()
            # adding element which can contribute to
            # sum
            temp.append(arr[i])
            findNumbers(ans, arr, temp, sum-arr[i], i)
 #mine: it is coming here because FOR is called by this
            # removing element from list (backtracking)
            count -= 1
            print (f'Came out of function:findNumbers {count}th time')
            print (f'temp before removing element at index:{i} which is {temp[i]} from temp:{temp}')
            input()
            temp.remove(arr[i])
            print (f'temp after removing {temp[i]} from temp:{temp}')
            input()
 
 
# Driver Code
arr = [2, 4, 6, 8]
sum = 8
count = 1
ans = combinationSum(arr, sum)
print (f"after calling combinationSum")
input() 
# If result is empty, then
if len(ans) <= 0:
    print("empty")
     
# print all combinations stored in ans
for i in range(len(ans)):
 
    print("(", end=' ')
    for j in range(len(ans[i])):
        print(str(ans[i][j])+" ", end=' ')
    print(")", end=' ')
 
""" 
# This Code Is Contributed by Rakesh(vijayarigela09)

def permute(a, l, r):     
    if l == r: 
        print(str(a)) 
    else: 
        for i in range(l, r): 
            a[l], a[i] = a[i], a[l] 
            print (f'a[l]:{a[l]} ; a[i]:{a[i]}, {l}, {i}, {r}, a:{a} ')
            #input()
            permute(a, l+1, r) 
            print (f'backtrack:--a[l]:{a[l]}, a[i]:{a[i]} = a[i]:{a[i]}, a[l]:{a[l]} -----')
            input()
            a[l], a[i] = a[i], a[l]  # backtrack 
  
  
# Driver code 
string = "ABC"
n = len(string) 
a = list(string) 
  
# Function call 
permute(a, 0, n) 

### Strings
#Case1. Longest Substring Without Repeating Characters
S = "geeksforgeeks"
my_list = list(S)

i = 0
count = 1
lst = []
arr = []
for r in range(i, len(S)):
    found = 0
    arr.append(my_list[r])
    while (found == 0):
        print (f' {arr[-1]} ; {my_list[r+count]} ')
        input()
        if my_list[r+count] != arr[-1]:
            arr.append(my_list[r+count])
            count += 1
            print (f'arr:{arr}')
            input()
        else:
            found = 1
            arr1 = arr.copy()
            lst.append(arr1)
            arr.clear()
            print (f'lst:{lst}')
            input()
            break
print (lst)
        
#Case2. Group Anagrams
my_list = ['act','god','cat','dog','tac']
lst = []
for r in range(len(my_list)):
    count = 1
    lst1 = list(my_list[r])
    final_list = []
    found = 0
    final_list.append(my_list[r])
    for x in lst:
        print (f'x:{x}')
        if (my_list[r] in x):
            print (f'my_list[r]:{my_list[r]}')
            input()
            found = 1
            break
    if found == 1:
        continue
    while (r+count)<len(my_list):
        lst2 = list(my_list[r+count])

        if all(x in lst2 for x in lst1) and all(y in lst1 for y in lst2):
            final_list.append(my_list[r+count])
        count += 1    
        
    lst.append(final_list)
print (lst)
    
#Case:3. Longest Palindromic Substring
from itertools import combinations

my_str = "forgeeksskeegfor"
my_list = []

for r in range(1, len(my_str)+1):
    comb = combinations(my_str, r)
    for c in comb:
        c = ''.join(c)
        my_list.append(c)
    #print (f'{my_list} =============================')
    #input()

final_list = []

for element in my_list:
    #element = ''.join(comb)
    mid = int(len(element)/2)
    #print (f'for element:{element}, mid is {mid}')
    for i in range(len(element)):
        if (i<=mid):
            j = -i-1
            if (element[i] != element[j]):
                break
        else:
            final_list.append(element)
# OR
for element in my_list:
    reversed = element[::-1]
    if element == reversed:
        final_list.append(element)

        
final_list1 = sorted(final_list, key = len, reverse=False)
print (final_list1[-1])           
            
#Case4. String Permutations -- recursion
#Case5. Valid Anagram
my_str1 = 'geeksforgeeks'
my_str2 = 'forgeeksgeeks'

if ( sorted(my_str1) == sorted(my_str2) ):
    print ('both are anagrams')

#Case6. Regular Expression Matching
P = "tar$"
S = "coaltar"
if '$' in P:
    P = P.replace('$', '')
    string_to_match = P[::-1]
    string_to_be_matched = S[::-1]
elif '^' in P:
    P = P.replace('^', '')
    string_to_match = P
    string_to_be_matched = S
else:
    string_to_match = S
    string_to_be_matched = P
print (f'{string_to_match} ; {string_to_be_matched}')

for r in range(len(string_to_match)):    
    if string_to_match[r] != string_to_be_matched[r]:
        print ('both are not matched')
        break
    print ('both are matched')
    
#Case7. Count and Say -- mine: try
#sample_my_list = [1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211]
start = 1
n = 5
for x in my_list:
    
8. Word Break II -- here
9. Longest Common Prefix
10. Minimum Window Substring
11. String to Integer (atoi)
12. Palindrome Partitioning
13. Find All Anagrams in a String
14. Repeated Substring Pattern
15. Implement strStr()

### Lists
16. Container With Most Water
17. Maximum Subarray
18. 3Sum
19. Kth Largest Element in an Array
20. Merge Intervals
21. Rotate Array
22. Next Permutation
23. Largest Rectangle in Histogram
24. Set Matrix Zeroes
25. Minimum Size Subarray Sum
26. Product of Array Except Self
27. Longest Consecutive Sequence
28. Find Minimum in Rotated Sorted Array
29. Combination Sum
30. Search in Rotated Sorted Array

### Tuples
31. Count Distinct Subsequences
32. Maximize Sum of Array After K Negations
33. Minimum Number of Refueling Stops
34. K Closest Points to Origin
35. Find the Duplicate Number
36. Maximum Product of Three Numbers
37. Top K Frequent Elements
38. Largest Sum of Averages
39. Maximum Profit in Job Scheduling
40. Sliding Window Maximum

### Dictionaries
41. Valid Parentheses
42. Group Shifted Strings
43. Most Common Word
44. Design a HashMap
45. LRU Cache
46. Find All Duplicates in an Array
47. Top K Frequent Words
48. Subarray Sum Equals K
49. Two Sum
50. Course Schedule

### Mixed Problems
51. Letter Combinations of a Phone Number
52. Palindrome Permutation
53. Longest Repeating Character Replacement
54. Find All Anagrams in a String
55. Valid Sudoku
56. Unique Paths II
57. Binary Tree Vertical Order Traversal
58. Number of Islands
59. Serialize and Deserialize Binary Tree
60. Subsets II

### Advanced String/Array Manipulation
61. Find the longest substring with at most K distinct characters
62. Maximum Number of Events That Can Be Attended
63. Minimum Window Substring
64. Combination Sum II
65. Number of Longest Increasing Subsequence
66. Sort Array By Parity
67. Missing Number
68. Range Sum Query - Immutable
69. Permutation in String
70. Sliding Window Median

### Advanced Dictionary Problems
71. Group Anagrams II
72. Unique Email Addresses
73. Find the Difference
74. Intersection of Two Arrays II
75. Construct Binary Tree from Inorder and Postorder Traversal
76. Binary Tree Right Side View
77. Word Search II
78. All Paths From Source to Target
79. K Frequency Element
80. Course Schedule III

### Advanced Tuple and List Problems
81. Minimum Number of Arrows to Burst Balloons
82. Largest Rectangle in Histogram
83. Reconstruct Itinerary
84. Evaluate Reverse Polish Notation
85. Find the Celebrity
86. Number of Connected Components in an Undirected Graph
87. Maximum Area of Island
88. Rotate Image
89. Candy
90. Largest Sum of Averages

### Final Set of Challenges
91. Maximize Distance to Closest Person
92. Binary Tree Pruning
93. Count Subarrays with Fixed Bounds
94. Number of Unique Paths
95. Brick Wall
96. Count of Smaller Numbers After Self
97. Kth Smallest Element in a BST
98. Find K Closest Elements
99. Serialize and Deserialize N-ary Tree
100. Sum of Distances in Tree

#=====================================================
### Backtracking
1. Subsets
2. Combination Sum
3. Permutations
4. N-Queens
5. Sudoku Solver
6. Letter Combinations of a Phone Number
7. Palindrome Partitioning II
8. Generate Parentheses
9. Combinations
10. Restore IP Addresses

### Sorting and Searching
11. Merge Sorted Array
#Case12. Kth Largest Element in an Array
my_list = [7, 10, 4, 3, 20, 15]
k = 3
my_list.sort()
print (my_list[k])

13. Find Peak Element
14. Search in Rotated Sorted Array
my_list = [4, 5, 6, 7, 0, 1, 2]
my_list = list(map(str, my_list))
target = '0'
my_str = ''.join(my_list)
index = my_str.find(target)
print (index)


15. Find First and Last Position of Element in Sorted Array
my_list = [1, 3, 5, 5, 5, 5, 67, 123, 125]
my_list = list(map(str, my_list))
my_str = ''.join(my_list)

x = '5'

first_index = my_str.find(x)
last_index = my_str.rfind(x)
print (f'{first_index} {last_index}')

16. Sort Colors
17. K Closest Points to Origin
18. Top K Frequent Elements
19. Search a 2D Matrix
20. Count of Smaller Numbers After Self

### Mathematical Problems
21. Count Primes
22. Valid Perfect Square
23. Power of Three
24. Factorial Trailing Zeroes
25. Missing Number
26. Happy Number
27. Reverse Integer
28. String to Integer (atoi)
29. Palindrome Number
30. Integer to Roman
"""
